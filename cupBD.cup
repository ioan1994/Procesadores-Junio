import java.io.*;
import java.util.Stack;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java_cup.runtime.*;
import java_cup.*;


parser code {:

	//método main para analizar 
	public static void main (String argv[]) throws Exception
	{
		try {
			//declaración del parser
			parser analizador;

			if(argv[0].equals("-i"))
			{
				analizador = new parser(new lexBD(System.in));
			}
			else
			{
				FileInputStream archivo = new FileInputStream(argv[0]);
				validarFormato(argv[0]);
				analizador = new parser(new lexBD(archivo));
			}
			
			analizador.parse();

		}
        catch (Exception e){System.err.println("Error: " + e.getMessage());}
	}

	public void syntax_error(Symbol cur_token){
		report_error("Syntax error", cur_token);
	}

	public static String validarFormato(String archivo) throws IOException
	{
		if(archivo.length()>=4){
			if(archivo.substring(archivo.length()-3,archivo.length()).equals(".bd")){
				return archivo;
			}else{
				throw new IOException("Formato de archivo no adecuado");
			}
		}else{
			throw new IOException("La longitud del archivo no puede ser tan corta.");
		}
	}

	public void report_error (String message, Object info) {
		System.err.print(message);
			if (info instanceof Symbol)
				if (((Symbol)info).left != -1){
				    java_cup.runtime.Symbol symb=((java_cup.runtime.Symbol)info);
					System.err.println(" at line " + (symb.right + 1) + ", token:  " + symb.value + "\n");
				}
	}



:};

// terminales y no terminales




terminal ABRIRCAMPO, BASEDEDATOS;
terminal CERRARCAMPO, ABRIRNOMBRE, ABRIRNUMERODECAMPOS, ABRIRTIPO, ABRIRNECESARIO, ABRIRNOMBRETABLA, CERRAR, TIPO, FECHA, COMAFLOTANTE, NATURAL, NOMBRE,DESCRIPCION, DATOS ,NECESARIO, ABRIRVALOR;

terminal START, AFIELD, END, CFIELD, TABLA, REGISTRO, CADENA, ENTERO;


non terminal todo, tabla, nombre, numero_de_campos, opcionalRegistro, registros;
non terminal descregistros, tipo, datos, necesario, valor, campos, campo;



todo ::= START BASEDEDATOS CERRAR tabla datos END BASEDEDATOS CERRAR{:
			System.out.println("Esa penita por ahi");
			:} | error;


tabla ::= START TABLA CERRAR nombre numero_de_campos descregistros END TABLA CERRAR {:
			:};


descregistros ::= descregistros AFIELD DESCRIPCION CERRAR nombre opcionalRegistro CFIELD DESCRIPCION CERRAR {:
			:} | AFIELD DESCRIPCION CERRAR nombre opcionalRegistro CFIELD DESCRIPCION CERRAR{::};

opcionalRegistro::= tipo necesario {::} | tipo {::} | necesario tipo;

nombre ::= ABRIRNOMBRE NOMBRE:n CERRAR {:
			System.out.println(n);
			:};

tipo ::= ABRIRTIPO TIPO CERRAR {::};

necesario ::= ABRIRNECESARIO NECESARIO CERRAR;

numero_de_campos ::= ABRIRNUMERODECAMPOS NATURAL CERRAR {:
			:};

//-----------------------------------------------------------------------------------------------//
datos ::=| START DATOS CERRAR registros END DATOS CERRAR {:
			:};

registros ::= registros START REGISTRO CERRAR ABRIRNOMBRETABLA NOMBRE CERRAR campos END REGISTRO CERRAR {::} 
			| START REGISTRO CERRAR ABRIRNOMBRETABLA NOMBRE CERRAR campos END REGISTRO CERRAR ;

campos ::= campos ABRIRCAMPO campo CERRARCAMPO {::}
			| ABRIRCAMPO campo CERRARCAMPO {::};

campo ::= ABRIRNOMBRE NOMBRE CERRAR ABRIRVALOR valor CERRAR {::};

valor ::= COMAFLOTANTE |  NATURAL | ENTERO  | CADENA  | FECHA ;