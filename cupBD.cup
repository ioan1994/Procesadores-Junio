import java.io.*;
import java.util.Stack;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java_cup.runtime.*;
import java_cup.*;



parser code {:


	//método main para analizar 
	public static void main (String argv[]) throws Exception
	{
		try {
			//declaración del parser
			parser analizador;

			if(argv[0].equals("-i"))
			{
				analizador = new parser(new lexBD(System.in));
			}
			else
			{
				FileInputStream archivo = new FileInputStream(argv[0]);
				validarFormato(argv[0]);
				analizador = new parser(new lexBD(archivo));
			}
			
			analizador.parse();

		}
        catch (Exception e){System.err.println("Error: " + e.getMessage());}
	}

	public void syntax_error(Symbol cur_token){
		report_error("Syntax error", cur_token);
	}

	public static String validarFormato(String archivo) throws IOException
	{
		if(archivo.length()>=4){
			if(archivo.substring(archivo.length()-3,archivo.length()).equals(".bd")){
				return archivo;
			}else{
				throw new IOException("Formato de archivo no adecuado");
			}
		}else{
			throw new IOException("La longitud del archivo no puede ser tan corta.");
		}
	}

	public void report_error (String message, Object info) {
		System.err.print(message);
			if (info instanceof Symbol)
				if (((Symbol)info).left != -1){
				    java_cup.runtime.Symbol symb=((java_cup.runtime.Symbol)info);
					System.err.println(" at line " + (symb.right + 1) + ", token:  " + symb.value + "\n");
				}
	}



:};

// terminales y no terminales




terminal ABRIRCAMPO, BASEDEDATOS,CERRARCAMPO, ABRIRNOMBRE, ABRIRNUMERODECAMPOS;
terminal ABRIRTIPO, ABRIRNECESARIO, ABRIRNOMBRETABLA, CERRAR ,DESCRIPCION, END;
terminal START, AFIELD, CFIELD, DATOS, TABLA, REGISTRO, ABRIRVALOR;


terminal String TIPO, CADENA, NOMBRE, FECHA;
terminal float COMAFLOTANTE;
terminal int NATURAL, ENTERO;
terminal Boolean NECESARIO;

non terminal todo;
non terminal Object valor;
non terminal Stack  campos, datos, registros, descampos;
non terminal Campo campo;
non terminal Integer numero_de_campos;
non terminal Boolean necesario;
non terminal String tipo, nombre;
non terminal Campo opcionalRegistro;
non terminal Descripcion tabla;

todo ::= START BASEDEDATOS CERRAR tabla:tab datos:dat END BASEDEDATOS CERRAR{:
				System.out.println(tab.getNombreTabla());
			:} | error;


tabla ::= START TABLA CERRAR nombre:nom numero_de_campos:numdc descampos:campos END TABLA CERRAR {:
				Descripcion descr = new Descripcion(nom, numdc, campos);
				descr.comprobarNumeroDeCampos();
				RESULT = descr;
			:};


descampos ::= descampos:resto AFIELD DESCRIPCION CERRAR nombre:nom opcionalRegistro:op CFIELD DESCRIPCION CERRAR {:
				op.setNombre(nom);
				resto.push(op);
				RESULT = resto;
			:} | AFIELD DESCRIPCION CERRAR nombre:nom opcionalRegistro:op CFIELD DESCRIPCION CERRAR{:
				op.setNombre(nom);
				Stack<Campo> stack = new Stack<Campo>();
				stack.push(op);
				RESULT = stack;
			:};

opcionalRegistro::= tipo:t necesario:n {:
				Campo campo = new Campo();
				campo.setTipo(t);
				campo.setNecesario(n);
				RESULT = campo;
			:} | tipo:t {:
				Campo campo = new Campo();
				campo.setTipo(t);
				campo.setNecesario(false);
				RESULT = campo;
			:} | necesario:n tipo:t {:
				Campo campo = new Campo();
				campo.setTipo(t);
				campo.setNecesario(n);
				RESULT = campo;
			:};

nombre ::= ABRIRNOMBRE NOMBRE:n CERRAR {:
				RESULT = n;
			:};

tipo ::= ABRIRTIPO TIPO:t CERRAR {:
				RESULT = t;
			:};

necesario ::= ABRIRNECESARIO NECESARIO:n CERRAR {:
				RESULT = n;
			:};

numero_de_campos ::= ABRIRNUMERODECAMPOS NATURAL:num CERRAR {:
				RESULT = num;
			:};

//-----------------------------------------------------------------------------------------------//
datos ::=| START DATOS CERRAR registros:reg END DATOS CERRAR {:
					RESULT = reg;
			:};

registros ::= registros:resto START REGISTRO CERRAR ABRIRNOMBRETABLA NOMBRE CERRAR campos:cabeza END REGISTRO CERRAR {:
					resto.push(cabeza);
					RESULT = resto;
			:}| START REGISTRO CERRAR ABRIRNOMBRETABLA NOMBRE:nom CERRAR campos:c END REGISTRO CERRAR {:
					Stack<Registro> stack = new Stack <Registro>();
					Registro r = new Registro(nom,c);
					stack.push(r);
					RESULT = stack;
			:};

campos ::= campos:resto ABRIRCAMPO campo:cabeza CERRARCAMPO {:
					resto.push(cabeza);
					RESULT = resto;
			:}| ABRIRCAMPO campo:c CERRARCAMPO   {:
					Stack<Campo> stack = new Stack <Campo>();
					stack.push(c);
					RESULT = stack;
			:};

campo ::= ABRIRNOMBRE NOMBRE:nom CERRAR ABRIRVALOR valor:val CERRAR {:
			Campo c = new Campo();
			c.setNombre(nom);
			c.setValor(val);
			RESULT = c;
		:};

valor ::= COMAFLOTANTE:v {:
				RESULT = v;
		:} | NATURAL:v   {:
				RESULT = v;
		:} | ENTERO:v 	 {:
				RESULT = v;
		:} | CADENA:v 	 {:
				RESULT = v;
		:} | FECHA:v 	 {:	
				RESULT = v;
		:};